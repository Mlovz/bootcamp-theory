{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USERED\\\\Desktop\\\\bootkemp\\\\REACT\\\\tasks\\u21161.2\\\\src\\\\App.jsx\";\nimport React, { useState } from \"react\";\nimport Avatar from \"./components/avatar/avatar\";\nimport ClickCounter from \"./components/ClickCounter/ClickCounter\";\nimport LightSwitch from \"./components/LightSwitch/LightSwitch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Avatar, {\n      className: \"avatar\",\n      size: \"small\",\n      ALT: \"\\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\\u043A\\u0430\",\n      URL: \"https://yastatic.net/naydex/yandex-search/sUsyH9350/835316C6w/XvWmwys1vmXHJWzjwgtllHIO7m39noeFoxyb7RJbkAVYtCGocNLAgXehXreJ_-VTjB0jNw69Z4oy1EMK9r0W2TvpupYaHKI4rnh0mpIraYB6e5thue_vlNd1kp0zU5wpeLV4CdBPDATqQMoadBYIcsl4bkN3gT6PmjA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n      className: \"avatar\",\n      size: \"medium\",\n      ALT: \"\\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\\u043A\\u0430\",\n      URL: \"https://yastatic.net/naydex/yandex-search/sUsyH9350/835316C6w/XvWmwys1vmXHJWzjwgtllHIO7m39noeFoxyb7RJbkAVYtCGocNLAgXehXreJ_-VTjB0jNw69Z4oy1EMK9r0W2TvpupYaHKI4rnh0mpIraYB6e5thue_vlNd1kp0zU5wpeLV4CdBPDATqQMoadBYIcsl4bkN3gT6PmjA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n      className: \"avatar\",\n      size: \"large\",\n      ALT: \"\\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\\u043A\\u0430\",\n      URL: \"https://yastatic.net/naydex/yandex-search/sUsyH9350/835316C6w/XvWmwys1vmXHJWzjwgtllHIO7m39noeFoxyb7RJbkAVYtCGocNLAgXehXreJ_-VTjB0jNw69Z4oy1EMK9r0W2TvpupYaHKI4rnh0mpIraYB6e5thue_vlNd1kp0zU5wpeLV4CdBPDATqQMoadBYIcsl4bkN3gT6PmjA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ClickCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LightSwitch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_c = App;\nexport default App;\n\n// 1. Счетчик кликов: \n// Создайте компонент ClickCounter, который отображает кнопку и показывает количество нажатий на эту кнопку с использованием useState.\n\n// 2. Переключатель света: \n// Создайте компонент LightSwitch, который изменяет состояние света (on или off) при нажатии кнопки.\n\n// 3. Текстовое поле с обратной связью: \n// Создайте компонент FeedbackInput, который отображает текст, введенный пользователем в поле ввода, и обновляет его в реальном времени с помощью useState.\n\n// 4. Смена цвета фона: \n// Создайте компонент ColorChanger, который имеет кнопку для смены цвета фона контейнера между несколькими предустановленными цветами с использованием useState.\n\n// 5. Таймер обратного отсчета: \n// Создайте компонент CountdownTimer, который отображает таймер, уменьшающийся при нажатии кнопки \"Старт\". Используйте useState для управления временем.\n\n// 6. Переключение видимости текста: \n// Создайте компонент ToggleText, который отображает или скрывает текст по нажатию кнопки.\n\n// 7. Форма для добавления задач: \n// Создайте компонент TaskManager, который позволяет добавлять задачи в список. Используйте useState для хранения списка задач.\n\n// 8. Счетчик лайков: \n// Создайте компонент LikeButton, который увеличивает количество лайков при нажатии на кнопку \"Лайк\".\n\n// 9. Управление вкладками: \n// Создайте компонент Tabs, который отображает различные секции контента при переключении между вкладками. Используйте useState для управления активной вкладкой.\n\n// 10. Калькулятор простых операций: \n// Создайте компонент SimpleCalculator, который принимает два числа и операцию (+, -, *, /), и выводит результат. Управляйте состоянием ввода и результата с useState.\n\n// 11. Контролируемый список покупок: \n// Создайте компонент ShoppingList, который позволяет добавлять и удалять элементы списка покупок с использованием useState.\n\n// 12. Показ уведомлений: \n// Создайте компонент Notification, который отображает уведомление при нажатии на кнопку и скрывает его через несколько секунд.\n\n// 13. Переходы между изображениями: \n// Создайте компонент ImageSlider, который переключает изображения в слайдере с помощью кнопок \"вперед\" и \"назад\", используя useState.\n\n// 14. Вопросы и ответы: \n// Создайте компонент FAQ, который раскрывает или скрывает ответы на вопросы по нажатию на них. Управляйте раскрытием с помощью useState.\n\n// 15. Смена темы приложения: \n// Создайте компонент ThemeSwitcher, который меняет тему (светлая/темная) по нажатию кнопки и отображает соответствующий стиль.\n\n// 16. Управление списком подписок: \n// Создайте компонент SubscriptionList, который позволяет добавлять и удалять подписки из списка. Используйте useState для хранения списка.\n\n// 17. Панель поиска с автозаполнением: \n// Создайте компонент SearchBar, который обновляет список предложений на основе ввода пользователя.\n\n// 18. Текущая дата и время: \n// Создайте компонент DateTimeDisplay, который обновляет текущее время при нажатии на кнопку \"Обновить\".\n\n// 19. Простая форма авторизации: \n// Создайте компонент LoginForm, который контролирует ввод имени пользователя и пароля и выводит сообщение при нажатии на кнопку \"Войти\".\n\n// 20. Калькулятор чаевых: \n// Создайте компонент TipCalculator, который принимает сумму счета и процент чаевых, и вычисляет общую сумму. Управляйте состоянием с useState.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Avatar","ClickCounter","LightSwitch","jsxDEV","_jsxDEV","App","className","children","size","ALT","URL","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USERED/Desktop/bootkemp/REACT/tasks№1.2/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport Avatar from \"./components/avatar/avatar\"\r\nimport ClickCounter from \"./components/ClickCounter/ClickCounter\"\r\nimport LightSwitch from \"./components/LightSwitch/LightSwitch\"\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Avatar className=\"avatar\" size=\"small\" ALT=\"аватарка\" URL=\"https://yastatic.net/naydex/yandex-search/sUsyH9350/835316C6w/XvWmwys1vmXHJWzjwgtllHIO7m39noeFoxyb7RJbkAVYtCGocNLAgXehXreJ_-VTjB0jNw69Z4oy1EMK9r0W2TvpupYaHKI4rnh0mpIraYB6e5thue_vlNd1kp0zU5wpeLV4CdBPDATqQMoadBYIcsl4bkN3gT6PmjA\"/>\r\n            <Avatar className=\"avatar\" size=\"medium\" ALT=\"аватарка\" URL=\"https://yastatic.net/naydex/yandex-search/sUsyH9350/835316C6w/XvWmwys1vmXHJWzjwgtllHIO7m39noeFoxyb7RJbkAVYtCGocNLAgXehXreJ_-VTjB0jNw69Z4oy1EMK9r0W2TvpupYaHKI4rnh0mpIraYB6e5thue_vlNd1kp0zU5wpeLV4CdBPDATqQMoadBYIcsl4bkN3gT6PmjA\"/>\r\n            <Avatar className=\"avatar\" size=\"large\" ALT=\"аватарка\" URL=\"https://yastatic.net/naydex/yandex-search/sUsyH9350/835316C6w/XvWmwys1vmXHJWzjwgtllHIO7m39noeFoxyb7RJbkAVYtCGocNLAgXehXreJ_-VTjB0jNw69Z4oy1EMK9r0W2TvpupYaHKI4rnh0mpIraYB6e5thue_vlNd1kp0zU5wpeLV4CdBPDATqQMoadBYIcsl4bkN3gT6PmjA\"/>\r\n            <ClickCounter />\r\n            <LightSwitch />\r\n        </div>\r\n    )\r\n}   \r\n\r\nexport default App\r\n\r\n// 1. Счетчик кликов: \r\n// Создайте компонент ClickCounter, который отображает кнопку и показывает количество нажатий на эту кнопку с использованием useState.\r\n\r\n// 2. Переключатель света: \r\n// Создайте компонент LightSwitch, который изменяет состояние света (on или off) при нажатии кнопки.\r\n\r\n// 3. Текстовое поле с обратной связью: \r\n// Создайте компонент FeedbackInput, который отображает текст, введенный пользователем в поле ввода, и обновляет его в реальном времени с помощью useState.\r\n\r\n// 4. Смена цвета фона: \r\n// Создайте компонент ColorChanger, который имеет кнопку для смены цвета фона контейнера между несколькими предустановленными цветами с использованием useState.\r\n\r\n// 5. Таймер обратного отсчета: \r\n// Создайте компонент CountdownTimer, который отображает таймер, уменьшающийся при нажатии кнопки \"Старт\". Используйте useState для управления временем.\r\n\r\n// 6. Переключение видимости текста: \r\n// Создайте компонент ToggleText, который отображает или скрывает текст по нажатию кнопки.\r\n\r\n// 7. Форма для добавления задач: \r\n// Создайте компонент TaskManager, который позволяет добавлять задачи в список. Используйте useState для хранения списка задач.\r\n\r\n// 8. Счетчик лайков: \r\n// Создайте компонент LikeButton, который увеличивает количество лайков при нажатии на кнопку \"Лайк\".\r\n\r\n// 9. Управление вкладками: \r\n// Создайте компонент Tabs, который отображает различные секции контента при переключении между вкладками. Используйте useState для управления активной вкладкой.\r\n\r\n// 10. Калькулятор простых операций: \r\n// Создайте компонент SimpleCalculator, который принимает два числа и операцию (+, -, *, /), и выводит результат. Управляйте состоянием ввода и результата с useState.\r\n\r\n// 11. Контролируемый список покупок: \r\n// Создайте компонент ShoppingList, который позволяет добавлять и удалять элементы списка покупок с использованием useState.\r\n\r\n// 12. Показ уведомлений: \r\n// Создайте компонент Notification, который отображает уведомление при нажатии на кнопку и скрывает его через несколько секунд.\r\n\r\n// 13. Переходы между изображениями: \r\n// Создайте компонент ImageSlider, который переключает изображения в слайдере с помощью кнопок \"вперед\" и \"назад\", используя useState.\r\n\r\n// 14. Вопросы и ответы: \r\n// Создайте компонент FAQ, который раскрывает или скрывает ответы на вопросы по нажатию на них. Управляйте раскрытием с помощью useState.\r\n\r\n// 15. Смена темы приложения: \r\n// Создайте компонент ThemeSwitcher, который меняет тему (светлая/темная) по нажатию кнопки и отображает соответствующий стиль.\r\n\r\n// 16. Управление списком подписок: \r\n// Создайте компонент SubscriptionList, который позволяет добавлять и удалять подписки из списка. Используйте useState для хранения списка.\r\n\r\n// 17. Панель поиска с автозаполнением: \r\n// Создайте компонент SearchBar, который обновляет список предложений на основе ввода пользователя.\r\n\r\n// 18. Текущая дата и время: \r\n// Создайте компонент DateTimeDisplay, который обновляет текущее время при нажатии на кнопку \"Обновить\".\r\n\r\n// 19. Простая форма авторизации: \r\n// Создайте компонент LoginForm, который контролирует ввод имени пользователя и пароля и выводит сообщение при нажатии на кнопку \"Войти\".\r\n\r\n// 20. Калькулятор чаевых: \r\n// Создайте компонент TipCalculator, который принимает сумму счета и процент чаевых, и вычисляет общую сумму. Управляйте состоянием с useState."],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,WAAW,MAAM,sCAAsC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG9D,SAASC,GAAGA,CAAA,EAAG;EACX,oBACID,OAAA;IAAKE,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBH,OAAA,CAACJ,MAAM;MAACM,SAAS,EAAC,QAAQ;MAACE,IAAI,EAAC,OAAO;MAACC,GAAG,EAAC,kDAAU;MAACC,GAAG,EAAC;IAAmO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChSV,OAAA,CAACJ,MAAM;MAACM,SAAS,EAAC,QAAQ;MAACE,IAAI,EAAC,QAAQ;MAACC,GAAG,EAAC,kDAAU;MAACC,GAAG,EAAC;IAAmO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjSV,OAAA,CAACJ,MAAM;MAACM,SAAS,EAAC,QAAQ;MAACE,IAAI,EAAC,OAAO;MAACC,GAAG,EAAC,kDAAU;MAACC,GAAG,EAAC;IAAmO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChSV,OAAA,CAACH,YAAY;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChBV,OAAA,CAACF,WAAW;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd;AAACC,EAAA,GAVQV,GAAG;AAYZ,eAAeA,GAAG;;AAElB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}